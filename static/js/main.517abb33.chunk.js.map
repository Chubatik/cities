{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weather","type","placeholder","name","Weather","className","data","city","country","temp","pressure","sunset","error","App","getWeather","e","a","preventDefault","target","value","url","fetch","request","json","setState","main","sys","convertTime","undefined","state","givenDate","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPASeA,EAPF,kBACT,gCACI,6CACA,sECIOC,EAPF,SAAAC,GAAK,OACd,uBAAMC,SAAUD,EAAME,QAAtB,UACI,uBAAOC,KAAM,OAAQC,YAAa,YAAaC,KAAM,SACrD,qDCWOC,EAdC,SAAAN,GAAK,OACjB,sBAAKO,UAAW,YAAhB,UACKP,EAAMQ,KAAKC,MACZ,gCACI,wCAAWT,EAAMQ,KAAKC,KAAtB,IAA6BT,EAAMQ,KAAKE,WACxC,8CAAiBV,EAAMQ,KAAKG,QAC5B,2CAAcX,EAAMQ,KAAKI,YACzB,yCAAYZ,EAAMQ,KAAKK,aAG3B,mBAAGN,UAAW,QAAd,SAAwBP,EAAMQ,KAAKM,YCPrCC,E,kDACF,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAaVgB,WAdmB,uCAcN,WAAOC,GAAP,qBAAAC,EAAA,yDACTD,EAAEE,mBACIV,EAAOQ,EAAEG,OAAOX,KAAKY,OAFlB,wBAICC,EAJD,4DAI4Db,EAJ5D,kBAhBD,mCAgBC,0BAKiBc,MAAMD,GALvB,cAKCE,EALD,gBAMcA,EAAQC,OANtB,OAMCjB,EAND,OAOL,EAAKkB,SAAS,CACVxB,QAAU,CACNS,KAAMH,EAAKmB,KAAKhB,KAChBF,KAAMD,EAAKH,KACXK,QAASF,EAAKoB,IAAIlB,QAClBE,SAAUJ,EAAKmB,KAAKf,SACpBC,OAAQ,EAAKgB,YAAYrB,EAAKoB,IAAIf,QAClCC,WAAOgB,KAdV,wBAkBL,EAAKJ,SAAS,CACVxB,QAAU,CACNS,UAAMmB,EACNrB,UAAMqB,EACNpB,aAASoB,EACTlB,cAAUkB,EACVjB,YAAQiB,EACRhB,MAAO,qBAzBV,4CAdM,sDAEf,EAAKiB,MAAQ,CACT7B,QAAU,CACNS,UAAMmB,EACNrB,UAAMqB,EACNpB,aAASoB,EACTlB,cAAUkB,EACVjB,YAAQiB,EACRhB,WAAOgB,IATA,E,+CA6CnB,SAAYE,GACR,IAAIC,EAAO,IAAIC,KAAiB,IAAZF,GAChBG,EAAQF,EAAKG,WACbC,EAAU,IAAMJ,EAAKK,aACrBC,EAAU,IAAMN,EAAKO,aACzB,OAAOL,EAAQ,IAAME,EAAQI,QAAQ,GAAK,IAAMF,EAAQE,QAAQ,K,oBAGpE,WACI,OACI,qBAAKlC,UAAW,UAAhB,SACI,qBAAKA,UAAW,OAAhB,SACI,qBAAKA,UAAW,YAAhB,SACI,sBAAKA,UAAW,MAAhB,UACI,qBAAKA,UAAW,gBAAhB,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAW,gBAAhB,UACI,cAAC,EAAD,CAAML,QAASwC,KAAK1B,aACpB,cAAC,EAAD,CAASR,KAAMkC,KAAKX,MAAM7B,0B,GAjExCyC,IAAMC,WA2ET7B,ICpEA8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.517abb33.chunk.js","sourcesContent":["import React from 'react';\n\nconst Info = () => (\n    <div>\n        <h2>Weather app</h2>\n        <p>Find out the weather in your city</p>\n    </div>\n)\n\nexport default Info;\n","import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.weather}>\n        <input type={'text'} placeholder={'City name'} name={'city'}/>\n        <button>Get weather</button>\n    </form>\n)\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => (\n    <div className={'infoWeath'}>\n        {props.data.city &&\n        <div>\n            <p>Place: {props.data.city} {props.data.country}</p>\n            <p>Temperature: {props.data.temp}</p>\n            <p>Pressure: {props.data.pressure}</p>\n            <p>Sunset: {props.data.sunset}</p>\n        </div>\n        }\n        <p className={'error'}>{props.data.error}</p>\n    </div>\n)\n\nexport default Weather;\n","import React from 'react';\nimport Info from \"./components/Info\";\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nconst API_KEY = 'c9ca293df89e1bd311d94dc22d49a5c1';\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            weather : {\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                pressure: undefined,\n                sunset: undefined,\n                error: undefined\n            }\n        };\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.city.value;\n        if (city) {\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n            const request = await fetch(url);\n            const data = await request.json();\n            this.setState({\n                weather : {\n                    temp: data.main.temp,\n                    city: data.name,\n                    country: data.sys.country,\n                    pressure: data.main.pressure,\n                    sunset: this.convertTime(data.sys.sunset),\n                    error: undefined\n                }\n            });\n        } else {\n            this.setState({\n                weather : {\n                    temp: undefined,\n                    city: undefined,\n                    country: undefined,\n                    pressure: undefined,\n                    sunset: undefined,\n                    error: \"Enter city name\"\n                }\n            })\n        }\n    }\n\n    convertTime(givenDate) {\n        let date = new Date(givenDate * 1000);\n        let hours = date.getHours();\n        let minutes = \"0\" + date.getMinutes();\n        let seconds = \"0\" + date.getSeconds();\n        return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    }\n\n    render() {\n        return (\n            <div className={'wrapper'}>\n                <div className={'main'}>\n                    <div className={'container'}>\n                        <div className={'row'}>\n                            <div className={'col-sm-5 info'}>\n                                <Info />\n                            </div>\n                            <div className={'col-sm-7 form'}>\n                                <Form weather={this.getWeather}/>\n                                <Weather data={this.state.weather} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}